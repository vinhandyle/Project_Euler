import java.util.*;

public class Functions
{
	public static int sumAdd(int n) 
	{ //n + (n - 1) + (n - 2) + ... 2 + 1
		int x = 0;
		for(int i = n; i > 0; i--)
		{
			x += i;
		}
		return x;
	}
	
	public static int leftRSum(int[] a, int[] b) 
	{ //left Riemann sum
		int sum = 0;
		for(int i = 0; i < a.length - 1; i++)
		{
			sum += ((a[i + 1] - a[i]) * b[i]);
		}
		return sum;
	}
	
	public static int rightRSum(int[] a, int[] b) 
	{ //right Riemann sum
		int sum = 0;
		for(int i = 1; i < a.length; i++)
		{
			sum += ((a[i] - a[i - 1]) * b[i]);
		}
		return sum;
	}
	
	public static int trapRSum(int[] a, int[] b) 
	{ //trapezoidal sum
		int sum = 0;
		for(int i = 1; i < a.length - 1; i++)
		{
			sum += ((a[i] - a[i - 1]) * (b[i] +b[i + 1]) / 2);
		}
		return sum;
	}
	
	public static int lFactor(double num)
	{ //finds least prime factor
		int factor = 2;
		while(num % factor != 0)
		{
			factor++;
		}
		return factor;
	}
	
	public static String flip(String s)
	{ //flips a string
		String f = "";
		for(int i = 1; i <= s.length(); i++)
		{
			f += s.charAt(s.length() - i);
		}
		return f;
	}
	
	public static boolean checkPrime(int n)
	{
		int factor = 2;
		while(factor < n)
		{
			if(n % factor == 0)
			{
				return false;
			} 
			if(factor == 2)
			{
				factor++;
			}
			else
			{
				factor += 2;
			}
		}
		return true;
	}
	
	public static int numDiv(int n)
	{//finds number of divisors: 8 => 1, 2, 4, 8 => 4
		int num = 0;
		int curr = n;
		while(curr > 0)
		{
			if(n % curr == 0)
			{
				num++;
			}
			curr--;
		}
		return num;
	}
	
	public static double factorial(double n)
	{
		double ex = 1;
		for(int i = 1; i <= n; i++)
		{
			ex *= i;
		}
		return ex;
	}
	
	public static double combin(double n, double r)
	{
		return factorial(n) / (factorial(r) * factorial(n - r));
	}
	
	public static int digitLength(int n)
	{
		if(n == 1) {return 3;} 
		if(n == 2) {return 3;}
		if(n == 3) {return 5;}
		if(n == 4) {return 4;}
		if(n == 5) {return 4;}
		if(n == 6) {return 3;}
		if(n == 7) {return 5;}
		if(n == 8) {return 5;}
		if(n == 9) {return 4;}
		
		if(n == 10) {return 3;}
		if(n == 11) {return 6;}
		if(n == 12) {return 6;}
		if(n == 13) {return 8;}
		if(n == 14) {return 8;}
		if(n == 15) {return 7;}
		if(n == 16) {return 7;}
		if(n == 17) {return 9;}
		if(n == 18) {return 8;}
		if(n == 19) {return 8;}
		
		if(n == 20) {return 6;}
		if(n == 30) {return 6;}
		if(n == 40) {return 5;}
		if(n == 50) {return 5;}
		if(n == 60) {return 5;}
		if(n == 70) {return 7;}
		if(n == 80) {return 6;}
		if(n == 90) {return 6;}
		
		return 0;
	}
	
	public static int biggestInArray(int[] arr)
	{ //goes through an array and returns the largest number
	  //swap parameter to int[] arr or ArrayList<Integer> arr if needed
		int largest = 0;
		for(int i = 0; i < arr.length; i++)
		{
			if(arr[i] > largest) {largest = arr[i];} //int[] arr
			//if(arr.get(i) > largest) {largest = arr.get(i);} //ArrayList<Integer> arr
		}
		return largest;
	}
	
	public static void fillSumArr(int[][] arr, int[] sumArr)
	{ //2d triangle array -> sums of each path -> sum array
		
		//first row
		for(int i = 0; i < sumArr.length; i++)
		{ 
			sumArr[i] += arr[0][0];
		}
		
		//other rows
		for(int i = 1; i < 4; i++)
		{ 			
			int index = 0;
			
			//inner curve (fix, some paths arent traced)
			for(int j = 0; j < i; j++)
			{ 
				for(int k = 0; k < Math.pow(2, (j - i + arr.length - 1)); k++)
				{ 
					sumArr[index] += arr[i][j];
					index++;
				}
			}
			
			//outer curve
			for(int j = 0; j < sumArr.length; j++)
			{
				if((int)(j / (sumArr.length / Math.pow(2, i))) == Math.pow(2, i) - 1)
				{ 
					sumArr[j] += arr[i][i]; 
				}
			}
		}
	}
	
	public static void printArray(int[] arr)
	{
		System.out.print("[");
		for(int i = 0; i < arr.length - 1; i++)
		{
			System.out.print(arr[i] + ", ");
		}
		System.out.println(arr[arr.length - 1] + "]");
	}
	
}
